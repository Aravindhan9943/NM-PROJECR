import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan

class AutonomousBot(Node):
    def __init__(self):
        super().__init__('autonomous_bot')
        self.publisher = self.create_publisher(Twist, '/cmd_vel', 10)
        self.subscriber = self.create_subscription(LaserScan, '/scan', self.lidar_callback, 10)
        self.timer = self.create_timer(0.1, self.move_bot)
        self.closest_distance = float('inf')
        self.linear_speed = 0.2
        self.angular_speed = 0.5

    def lidar_callback(self, msg):
        front_angles = msg.ranges[len(msg.ranges)//3: 2*len(msg.ranges)//3]
        self.closest_distance = min(front_angles)

    def move_bot(self):
        msg = Twist()
        if self.closest_distance < 0.5:
            self.get_logger().info('Obstacle ahead! Turning...')
            msg.angular.z = self.angular_speed
        else:
            msg.linear.x = self.linear_speed
        self.publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    bot = AutonomousBot()
    rclpy.spin(bot)
    bot.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()




import cv2
import tensorflow as tf

model = tf.keras.applications.MobileNetV2(weights="imagenet")
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    img = cv2.resize(frame, (224, 224))
    img = tf.keras.applications.mobilenet_v2.preprocess_input(img)
    img = tf.expand_dims(img, axis=0)
    preds = model.predict(img)
    label = tf.keras.applications.mobilenet_v2.decode_predictions(preds, top=1)[0][0][1]
    cv2.putText(frame, label, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow("Frame", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
